{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(window.location.hostname === 'localhost' ||\n// [::1] is the IPv6 localhost address.\nwindow.location.hostname === '[::1]' ||\n// 127.0.0.0/8 are considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log('This web app is being served cache-first by a service ' + 'worker. To learn more, visit https://cra.link/PWA');\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker.register(swUrl).then(registration => {\n    registration.onupdatefound = () => {\n      const installingWorker = registration.installing;\n      if (installingWorker == null) {\n        return;\n      }\n      installingWorker.onstatechange = () => {\n        if (installingWorker.state === 'installed') {\n          if (navigator.serviceWorker.controller) {\n            // At this point, the updated precached content has been fetched,\n            // but the previous service worker will still serve the older\n            // content until all client tabs are closed.\n            console.log('New content is available and will be used when all ' + 'tabs for this page are closed. See https://cra.link/PWA.');\n\n            // Execute callback\n            if (config && config.onUpdate) {\n              config.onUpdate(registration);\n            }\n          } else {\n            // At this point, everything has been precached.\n            // It's the perfect time to display a\n            // \"Content is cached for offline use.\" message.\n            console.log('Content is cached for offline use.');\n\n            // Execute callback\n            if (config && config.onSuccess) {\n              config.onSuccess(registration);\n            }\n          }\n        }\n      };\n    };\n  }).catch(error => {\n    console.error('Error during service worker registration:', error);\n  });\n}\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: {\n      'Service-Worker': 'script'\n    }\n  }).then(response => {\n    // Ensure service worker exists, and that we really are getting a JS file.\n    const contentType = response.headers.get('content-type');\n    if (response.status === 404 || contentType != null && contentType.indexOf('javascript') === -1) {\n      // No service worker found. Probably a different app. Reload the page.\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister().then(() => {\n          window.location.reload();\n        });\n      });\n    } else {\n      // Service worker found. Proceed as normal.\n      registerValidSW(swUrl, config);\n    }\n  }).catch(() => {\n    console.log('No internet connection found. App is running in offline mode.');\n  });\n}\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    }).catch(error => {\n      console.error(error.message);\n    });\n  }\n}","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","swUrl","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","headers","response","contentType","get","status","indexOf","unregister","reload","message"],"sources":["/Applications/XAMPP/xamppfiles/htdocs/client/src/serviceWorkerRegistration.js"],"sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t  // [::1] is the IPv6 localhost address.\n\t  window.location.hostname === '[::1]' ||\n\t  // 127.0.0.0/8 are considered localhost for IPv4.\n\t  window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n  );\n  \n  export function register(config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t  // The URL constructor is available in all browsers that support SW.\n\t  const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n\t  if (publicUrl.origin !== window.location.origin) {\n\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\treturn;\n\t  }\n  \n\t  window.addEventListener('load', () => {\n\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n\t\tif (isLocalhost) {\n\t\t  // This is running on localhost. Let's check if a service worker still exists or not.\n\t\t  checkValidServiceWorker(swUrl, config);\n  \n\t\t  // Add some additional logging to localhost, pointing developers to the\n\t\t  // service worker/PWA documentation.\n\t\t  navigator.serviceWorker.ready.then(() => {\n\t\t\tconsole.log(\n\t\t\t  'This web app is being served cache-first by a service ' +\n\t\t\t\t'worker. To learn more, visit https://cra.link/PWA'\n\t\t\t);\n\t\t  });\n\t\t} else {\n\t\t  // Is not localhost. Just register service worker\n\t\t  registerValidSW(swUrl, config);\n\t\t}\n\t  });\n\t}\n  }\n  \n  function registerValidSW(swUrl, config) {\n\tnavigator.serviceWorker\n\t  .register(swUrl)\n\t  .then((registration) => {\n\t\tregistration.onupdatefound = () => {\n\t\t  const installingWorker = registration.installing;\n\t\t  if (installingWorker == null) {\n\t\t\treturn;\n\t\t  }\n\t\t  installingWorker.onstatechange = () => {\n\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t  if (navigator.serviceWorker.controller) {\n\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t// content until all client tabs are closed.\n\t\t\t\tconsole.log(\n\t\t\t\t  'New content is available and will be used when all ' +\n\t\t\t\t\t'tabs for this page are closed. See https://cra.link/PWA.'\n\t\t\t\t);\n  \n\t\t\t\t// Execute callback\n\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t  config.onUpdate(registration);\n\t\t\t\t}\n\t\t\t  } else {\n\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t// It's the perfect time to display a\n\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\tconsole.log('Content is cached for offline use.');\n  \n\t\t\t\t// Execute callback\n\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t  config.onSuccess(registration);\n\t\t\t\t}\n\t\t\t  }\n\t\t\t}\n\t\t  };\n\t\t};\n\t  })\n\t  .catch((error) => {\n\t\tconsole.error('Error during service worker registration:', error);\n\t  });\n  }\n  \n  function checkValidServiceWorker(swUrl, config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t  headers: { 'Service-Worker': 'script' },\n\t})\n\t  .then((response) => {\n\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\tconst contentType = response.headers.get('content-type');\n\t\tif (\n\t\t  response.status === 404 ||\n\t\t  (contentType != null && contentType.indexOf('javascript') === -1)\n\t\t) {\n\t\t  // No service worker found. Probably a different app. Reload the page.\n\t\t  navigator.serviceWorker.ready.then((registration) => {\n\t\t\tregistration.unregister().then(() => {\n\t\t\t  window.location.reload();\n\t\t\t});\n\t\t  });\n\t\t} else {\n\t\t  // Service worker found. Proceed as normal.\n\t\t  registerValidSW(swUrl, config);\n\t\t}\n\t  })\n\t  .catch(() => {\n\t\tconsole.log('No internet connection found. App is running in offline mode.');\n\t  });\n  }\n  \n  export function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t  navigator.serviceWorker.ready\n\t\t.then((registration) => {\n\t\t  registration.unregister();\n\t\t})\n\t\t.catch((error) => {\n\t\t  console.error(error.message);\n\t\t});\n\t}\n  }\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}